{"ast":null,"code":"export const addToFav = company => ({\n  type: 'ADD_TO_FAV',\n  payload: company\n});\nexport const removeFromFav = company => ({\n  type: 'REMOVE_FROM_FAV',\n  payload: company\n});\nexport const getJobs = () => {\n  return async (dispatch, getState) => {\n    // dispatch here is coming thanks to redux-thunk\n    // fetch the books here!\n    // this function can handle async operations (like a fetch) or conditionally dispatch the action,\n    // delay the dispatching of an action, do complex data manipulation\n    try {\n      dispatch({\n        type: 'SET_LOADING',\n        payload: true\n      });\n      let resp = await fetch('https://remotive.io/api/remote-jobs?company_name=' + this.props.match.params.companyName);\n      console.log(getState());\n\n      if (resp.ok) {\n        let {\n          jobs\n        } = await resp.json();\n        dispatch({\n          type: 'GET_BOOKS',\n          payload: books\n        });\n        dispatch({\n          type: 'SET_LOADING',\n          payload: false\n        });\n        dispatch({\n          type: 'SET_ERROR',\n          payload: false\n        });\n      } else {\n        console.log('error');\n        dispatch({\n          type: 'SET_LOADING',\n          payload: false\n        });\n        dispatch({\n          type: 'SET_ERROR',\n          payload: true\n        });\n      }\n    } catch (error) {\n      console.log(error);\n      dispatch({\n        type: 'SET_LOADING',\n        payload: false\n      });\n      dispatch({\n        type: 'SET_ERROR',\n        payload: true\n      });\n    }\n  };\n};","map":{"version":3,"sources":["/Users/TotiBros/Documents/GitHub/JOBS/src/store/actions/index.js"],"names":["addToFav","company","type","payload","removeFromFav","getJobs","dispatch","getState","resp","fetch","props","match","params","companyName","console","log","ok","jobs","json","books","error"],"mappings":"AAAA,OAAO,MAAMA,QAAQ,GAAIC,OAAD,KAAc;AAClCC,EAAAA,IAAI,EAAE,YAD4B;AAElCC,EAAAA,OAAO,EAAEF;AAFyB,CAAd,CAAjB;AAKP,OAAO,MAAMG,aAAa,GAAIH,OAAD,KAAc;AACvCC,EAAAA,IAAI,EAAE,iBADiC;AAEvCC,EAAAA,OAAO,EAAEF;AAF8B,CAAd,CAAtB;AAMP,OAAO,MAAMI,OAAO,GAAG,MAAM;AACzB,SAAO,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AACnC;AACA;AACA;AACA;AACA,QAAI;AACFD,MAAAA,QAAQ,CAAC;AACPJ,QAAAA,IAAI,EAAE,aADC;AAEPC,QAAAA,OAAO,EAAE;AAFF,OAAD,CAAR;AAIA,UAAIK,IAAI,GAAG,MAAMC,KAAK,CAAC,sDAAsD,KAAKC,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBC,WAA/E,CAAtB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYR,QAAQ,EAApB;;AACA,UAAIC,IAAI,CAACQ,EAAT,EAAa;AACX,YAAI;AAACC,UAAAA;AAAD,YAAS,MAAMT,IAAI,CAACU,IAAL,EAAnB;AACAZ,QAAAA,QAAQ,CAAC;AACPJ,UAAAA,IAAI,EAAE,WADC;AAEPC,UAAAA,OAAO,EAAEgB;AAFF,SAAD,CAAR;AAIAb,QAAAA,QAAQ,CAAC;AACPJ,UAAAA,IAAI,EAAE,aADC;AAEPC,UAAAA,OAAO,EAAE;AAFF,SAAD,CAAR;AAIAG,QAAAA,QAAQ,CAAC;AACPJ,UAAAA,IAAI,EAAE,WADC;AAEPC,UAAAA,OAAO,EAAE;AAFF,SAAD,CAAR;AAID,OAdD,MAcO;AACLW,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACAT,QAAAA,QAAQ,CAAC;AACPJ,UAAAA,IAAI,EAAE,aADC;AAEPC,UAAAA,OAAO,EAAE;AAFF,SAAD,CAAR;AAIAG,QAAAA,QAAQ,CAAC;AACPJ,UAAAA,IAAI,EAAE,WADC;AAEPC,UAAAA,OAAO,EAAE;AAFF,SAAD,CAAR;AAID;AACF,KAhCD,CAgCE,OAAOiB,KAAP,EAAc;AACdN,MAAAA,OAAO,CAACC,GAAR,CAAYK,KAAZ;AACAd,MAAAA,QAAQ,CAAC;AACPJ,QAAAA,IAAI,EAAE,aADC;AAEPC,QAAAA,OAAO,EAAE;AAFF,OAAD,CAAR;AAIAG,MAAAA,QAAQ,CAAC;AACPJ,QAAAA,IAAI,EAAE,WADC;AAEPC,QAAAA,OAAO,EAAE;AAFF,OAAD,CAAR;AAID;AACF,GAhDD;AAiDD,CAlDI","sourcesContent":["export const addToFav = (company) => ({\n    type: 'ADD_TO_FAV',\n    payload: company\n})\n\nexport const removeFromFav = (company) => ({\n    type: 'REMOVE_FROM_FAV',\n    payload: company\n})\n\n\nexport const getJobs = () => {\n    return async (dispatch, getState) => {\n      // dispatch here is coming thanks to redux-thunk\n      // fetch the books here!\n      // this function can handle async operations (like a fetch) or conditionally dispatch the action,\n      // delay the dispatching of an action, do complex data manipulation\n      try {\n        dispatch({\n          type: 'SET_LOADING',\n          payload: true,\n        })\n        let resp = await fetch('https://remotive.io/api/remote-jobs?company_name=' + this.props.match.params.companyName)\n        console.log(getState())\n        if (resp.ok) {\n          let {jobs} = await resp.json()\n          dispatch({\n            type: 'GET_BOOKS',\n            payload: books,\n          })\n          dispatch({\n            type: 'SET_LOADING',\n            payload: false,\n          })\n          dispatch({\n            type: 'SET_ERROR',\n            payload: false,\n          })\n        } else {\n          console.log('error')\n          dispatch({\n            type: 'SET_LOADING',\n            payload: false,\n          })\n          dispatch({\n            type: 'SET_ERROR',\n            payload: true,\n          })\n        }\n      } catch (error) {\n        console.log(error)\n        dispatch({\n          type: 'SET_LOADING',\n          payload: false,\n        })\n        dispatch({\n          type: 'SET_ERROR',\n          payload: true,\n        })\n      }\n    }\n  }"]},"metadata":{},"sourceType":"module"}